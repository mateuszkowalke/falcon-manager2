// This file is automatically generated by Keystone, do not modify it manually.
// Modify your Keystone config when you want to change this.

datasource postgresql {
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  provider          = "postgresql"
}

generator client {
  provider = "prisma-client-js"
  output   = "node_modules/.prisma/client"
}

model User {
  id               String            @id @default(cuid())
  firstName        String            @default("")
  lastName         String            @default("")
  email            String            @unique @default("")
  password         String
  isAdmin          Boolean           @default(false)
  falcons          Falcon?           @relation("Falcon_owner")
  breedingProjects BreedingProject[] @relation("BreedingProject_owner")
  addresses        Address[]         @relation("Address_owner")
  aviaries         Aviary[]          @relation("Aviary_owner")
  pairs            Pair[]            @relation("Pair_owner")
  documents        Document[]        @relation("Document_owner")
  offices          Office[]          @relation("Office_owner")
  createdAt        DateTime?         @default(now())
  updatedAt        DateTime?         @default(now())
}

model BreedingProject {
  id        String    @id @default(cuid())
  name      String    @default("")
  vetRegNo  String    @default("")
  address   Address?  @relation("Address_breedingProject")
  aviaries  Aviary?   @relation("Aviary_breedingProject")
  offices   Office?   @relation("BreedingProject_offices", fields: [officesId], references: [id])
  officesId String?   @unique @map("offices")
  owner     User?     @relation("BreedingProject_owner", fields: [ownerId], references: [id])
  ownerId   String?   @map("owner")
  createdAt DateTime? @default(now())
  updatedAt DateTime? @default(now())

  @@index([ownerId])
}

model Aviary {
  id                String           @id @default(cuid())
  name              String           @default("")
  capacity          Int              @default(0)
  falcons           Falcon?          @relation("Aviary_falcons", fields: [falconsId], references: [id])
  falconsId         String?          @unique @map("falcons")
  lastCleaned       DateTime?
  breedingProject   BreedingProject? @relation("Aviary_breedingProject", fields: [breedingProjectId], references: [id])
  breedingProjectId String?          @unique @map("breedingProject")
  owner             User?            @relation("Aviary_owner", fields: [ownerId], references: [id])
  ownerId           String?          @map("owner")
  createdAt         DateTime?        @default(now())
  updatedAt         DateTime?        @default(now())

  @@index([ownerId])
}

model Address {
  id                String           @id @default(cuid())
  street            String           @default("")
  no                String           @default("")
  zipCode           String           @default("")
  city              String           @default("")
  country           String           @default("")
  breedingProject   BreedingProject? @relation("Address_breedingProject", fields: [breedingProjectId], references: [id])
  breedingProjectId String?          @unique @map("breedingProject")
  owner             User?            @relation("Address_owner", fields: [ownerId], references: [id])
  ownerId           String?          @map("owner")
  createdAt         DateTime?        @default(now())
  updatedAt         DateTime?        @default(now())

  @@index([ownerId])
}

model Falcon {
  id                   String         @id @default(cuid())
  name                 String         @default("")
  ring                 String         @default("")
  species              Species?       @relation("Falcon_species", fields: [speciesId], references: [id])
  speciesId            String?        @map("species")
  sex                  FalconSexType? @default(UNKNOWN)
  birthDate            DateTime?
  source               String         @default("")
  widthYoung           Int?
  lengthYoung          Int?
  weightYoung          Int?
  widthOld             Int?
  lengthOld            Int?
  weightOld            Int?
  notes                String         @default("")
  inPair               Pair?          @relation("Falcon_inPair", fields: [inPairId], references: [id])
  inPairId             String?        @map("inPair")
  parentPair           Pair?          @relation("Falcon_parentPair", fields: [parentPairId], references: [id])
  parentPairId         String?        @map("parentPair")
  aviary               Aviary?        @relation("Aviary_falcons")
  owner                User?          @relation("Falcon_owner", fields: [ownerId], references: [id])
  ownerId              String?        @unique @map("owner")
  createdAt            DateTime?      @default(now())
  updatedAt            DateTime?      @default(now())
  from_Pair_male       Pair[]         @relation("Pair_male")
  from_Pair_female     Pair[]         @relation("Pair_female")
  from_Document_falcon Document[]     @relation("Document_falcon")

  @@index([speciesId])
  @@index([inPairId])
  @@index([parentPairId])
}

model Pair {
  id                 String    @id @default(cuid())
  name               String    @default("")
  notes              String    @default("")
  male               Falcon?   @relation("Pair_male", fields: [maleId], references: [id])
  maleId             String?   @map("male")
  female             Falcon?   @relation("Pair_female", fields: [femaleId], references: [id])
  femaleId           String?   @map("female")
  children           Falcon[]  @relation("Falcon_parentPair")
  owner              User?     @relation("Pair_owner", fields: [ownerId], references: [id])
  ownerId            String?   @map("owner")
  putTogether        DateTime? @default(now())
  split              DateTime?
  createdAt          DateTime? @default(now())
  updatedAt          DateTime? @default(now())
  from_Falcon_inPair Falcon[]  @relation("Falcon_inPair")

  @@index([maleId])
  @@index([femaleId])
  @@index([ownerId])
}

model Species {
  id                  String   @id @default(cuid())
  name                String   @default("")
  latin               String   @default("")
  from_Falcon_species Falcon[] @relation("Falcon_species")
}

model Document {
  id                String        @id @default(cuid())
  falcon            Falcon?       @relation("Document_falcon", fields: [falconId], references: [id])
  falconId          String?       @map("falcon")
  documentType      DocumentType? @relation("Document_documentType", fields: [documentTypeId], references: [id])
  documentTypeId    String?       @map("documentType")
  documentNumber    String        @default("")
  scanFile_filesize Int?
  scanFile_filename String?
  rawFile_filesize  Int?
  rawFile_filename  String?
  owner             User?         @relation("Document_owner", fields: [ownerId], references: [id])
  ownerId           String?       @map("owner")
  createdAt         DateTime?     @default(now())
  updatedAt         DateTime?     @default(now())

  @@index([falconId])
  @@index([documentTypeId])
  @@index([ownerId])
}

model DocumentType {
  id                         String     @id @default(cuid())
  name                       String     @default("")
  from_Document_documentType Document[] @relation("Document_documentType")
}

model Office {
  id              String           @id @default(cuid())
  officeType      OfficeType?      @relation("Office_officeType", fields: [officeTypeId], references: [id])
  officeTypeId    String?          @map("officeType")
  name            String           @default("")
  breedingProject BreedingProject? @relation("BreedingProject_offices")
  owner           User?            @relation("Office_owner", fields: [ownerId], references: [id])
  ownerId         String?          @map("owner")
  createdAt       DateTime?        @default(now())
  updatedAt       DateTime?        @default(now())

  @@index([officeTypeId])
  @@index([ownerId])
}

model OfficeType {
  id                     String   @id @default(cuid())
  name                   String   @default("")
  from_Office_officeType Office[] @relation("Office_officeType")
}

enum FalconSexType {
  UNKNOWN
  MALE
  FEMALE
}
