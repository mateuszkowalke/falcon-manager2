# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  firstName: String
  lastName: String
  email: String
  password: PasswordState
  isAdmin: Boolean
  falcons: Falcon
  breedingProjects(where: BreedingProjectWhereInput! = {}, orderBy: [BreedingProjectOrderByInput!]! = [], take: Int, skip: Int! = 0): [BreedingProject!]
  breedingProjectsCount(where: BreedingProjectWhereInput! = {}): Int
  addresses(where: AddressWhereInput! = {}, orderBy: [AddressOrderByInput!]! = [], take: Int, skip: Int! = 0): [Address!]
  addressesCount(where: AddressWhereInput! = {}): Int
  aviaries(where: AviaryWhereInput! = {}, orderBy: [AviaryOrderByInput!]! = [], take: Int, skip: Int! = 0): [Aviary!]
  aviariesCount(where: AviaryWhereInput! = {}): Int
  pairs(where: PairWhereInput! = {}, orderBy: [PairOrderByInput!]! = [], take: Int, skip: Int! = 0): [Pair!]
  pairsCount(where: PairWhereInput! = {}): Int
  documents(where: DocumentWhereInput! = {}, orderBy: [DocumentOrderByInput!]! = [], take: Int, skip: Int! = 0): [Document!]
  documentsCount(where: DocumentWhereInput! = {}): Int
  offices(where: OfficeWhereInput! = {}, orderBy: [OfficeOrderByInput!]! = [], take: Int, skip: Int! = 0): [Office!]
  officesCount(where: OfficeWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
}

type PasswordState {
  isSet: Boolean!
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  firstName: StringFilter
  lastName: StringFilter
  email: StringFilter
  isAdmin: BooleanFilter
  falcons: FalconWhereInput
  breedingProjects: BreedingProjectManyRelationFilter
  addresses: AddressManyRelationFilter
  aviaries: AviaryManyRelationFilter
  pairs: PairManyRelationFilter
  documents: DocumentManyRelationFilter
  offices: OfficeManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input BreedingProjectManyRelationFilter {
  every: BreedingProjectWhereInput
  some: BreedingProjectWhereInput
  none: BreedingProjectWhereInput
}

input AddressManyRelationFilter {
  every: AddressWhereInput
  some: AddressWhereInput
  none: AddressWhereInput
}

input AviaryManyRelationFilter {
  every: AviaryWhereInput
  some: AviaryWhereInput
  none: AviaryWhereInput
}

input PairManyRelationFilter {
  every: PairWhereInput
  some: PairWhereInput
  none: PairWhereInput
}

input DocumentManyRelationFilter {
  every: DocumentWhereInput
  some: DocumentWhereInput
  none: DocumentWhereInput
}

input OfficeManyRelationFilter {
  every: OfficeWhereInput
  some: OfficeWhereInput
  none: OfficeWhereInput
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input UserOrderByInput {
  id: OrderDirection
  firstName: OrderDirection
  lastName: OrderDirection
  email: OrderDirection
  isAdmin: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  firstName: String
  lastName: String
  email: String
  password: String
  isAdmin: Boolean
  falcons: FalconRelateToOneForUpdateInput
  breedingProjects: BreedingProjectRelateToManyForUpdateInput
  addresses: AddressRelateToManyForUpdateInput
  aviaries: AviaryRelateToManyForUpdateInput
  pairs: PairRelateToManyForUpdateInput
  documents: DocumentRelateToManyForUpdateInput
  offices: OfficeRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input FalconRelateToOneForUpdateInput {
  create: FalconCreateInput
  connect: FalconWhereUniqueInput
  disconnect: Boolean
}

input BreedingProjectRelateToManyForUpdateInput {
  disconnect: [BreedingProjectWhereUniqueInput!]
  set: [BreedingProjectWhereUniqueInput!]
  create: [BreedingProjectCreateInput!]
  connect: [BreedingProjectWhereUniqueInput!]
}

input AddressRelateToManyForUpdateInput {
  disconnect: [AddressWhereUniqueInput!]
  set: [AddressWhereUniqueInput!]
  create: [AddressCreateInput!]
  connect: [AddressWhereUniqueInput!]
}

input AviaryRelateToManyForUpdateInput {
  disconnect: [AviaryWhereUniqueInput!]
  set: [AviaryWhereUniqueInput!]
  create: [AviaryCreateInput!]
  connect: [AviaryWhereUniqueInput!]
}

input PairRelateToManyForUpdateInput {
  disconnect: [PairWhereUniqueInput!]
  set: [PairWhereUniqueInput!]
  create: [PairCreateInput!]
  connect: [PairWhereUniqueInput!]
}

input DocumentRelateToManyForUpdateInput {
  disconnect: [DocumentWhereUniqueInput!]
  set: [DocumentWhereUniqueInput!]
  create: [DocumentCreateInput!]
  connect: [DocumentWhereUniqueInput!]
}

input OfficeRelateToManyForUpdateInput {
  disconnect: [OfficeWhereUniqueInput!]
  set: [OfficeWhereUniqueInput!]
  create: [OfficeCreateInput!]
  connect: [OfficeWhereUniqueInput!]
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  firstName: String
  lastName: String
  email: String
  password: String
  isAdmin: Boolean
  falcons: FalconRelateToOneForCreateInput
  breedingProjects: BreedingProjectRelateToManyForCreateInput
  addresses: AddressRelateToManyForCreateInput
  aviaries: AviaryRelateToManyForCreateInput
  pairs: PairRelateToManyForCreateInput
  documents: DocumentRelateToManyForCreateInput
  offices: OfficeRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input FalconRelateToOneForCreateInput {
  create: FalconCreateInput
  connect: FalconWhereUniqueInput
}

input BreedingProjectRelateToManyForCreateInput {
  create: [BreedingProjectCreateInput!]
  connect: [BreedingProjectWhereUniqueInput!]
}

input AddressRelateToManyForCreateInput {
  create: [AddressCreateInput!]
  connect: [AddressWhereUniqueInput!]
}

input AviaryRelateToManyForCreateInput {
  create: [AviaryCreateInput!]
  connect: [AviaryWhereUniqueInput!]
}

input PairRelateToManyForCreateInput {
  create: [PairCreateInput!]
  connect: [PairWhereUniqueInput!]
}

input DocumentRelateToManyForCreateInput {
  create: [DocumentCreateInput!]
  connect: [DocumentWhereUniqueInput!]
}

input OfficeRelateToManyForCreateInput {
  create: [OfficeCreateInput!]
  connect: [OfficeWhereUniqueInput!]
}

type BreedingProject {
  id: ID!
  name: String
  vetRegNo: String
  address: Address
  aviaries: Aviary
  offices: Office
  owner: User
  createdAt: DateTime
  updatedAt: DateTime
}

input BreedingProjectWhereUniqueInput {
  id: ID
}

input BreedingProjectWhereInput {
  AND: [BreedingProjectWhereInput!]
  OR: [BreedingProjectWhereInput!]
  NOT: [BreedingProjectWhereInput!]
  id: IDFilter
  name: StringFilter
  vetRegNo: StringFilter
  address: AddressWhereInput
  aviaries: AviaryWhereInput
  offices: OfficeWhereInput
  owner: UserWhereInput
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input BreedingProjectOrderByInput {
  id: OrderDirection
  name: OrderDirection
  vetRegNo: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input BreedingProjectUpdateInput {
  name: String
  vetRegNo: String
  address: AddressRelateToOneForUpdateInput
  aviaries: AviaryRelateToOneForUpdateInput
  offices: OfficeRelateToOneForUpdateInput
  owner: UserRelateToOneForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input AddressRelateToOneForUpdateInput {
  create: AddressCreateInput
  connect: AddressWhereUniqueInput
  disconnect: Boolean
}

input AviaryRelateToOneForUpdateInput {
  create: AviaryCreateInput
  connect: AviaryWhereUniqueInput
  disconnect: Boolean
}

input OfficeRelateToOneForUpdateInput {
  create: OfficeCreateInput
  connect: OfficeWhereUniqueInput
  disconnect: Boolean
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input BreedingProjectUpdateArgs {
  where: BreedingProjectWhereUniqueInput!
  data: BreedingProjectUpdateInput!
}

input BreedingProjectCreateInput {
  name: String
  vetRegNo: String
  address: AddressRelateToOneForCreateInput
  aviaries: AviaryRelateToOneForCreateInput
  offices: OfficeRelateToOneForCreateInput
  owner: UserRelateToOneForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input AddressRelateToOneForCreateInput {
  create: AddressCreateInput
  connect: AddressWhereUniqueInput
}

input AviaryRelateToOneForCreateInput {
  create: AviaryCreateInput
  connect: AviaryWhereUniqueInput
}

input OfficeRelateToOneForCreateInput {
  create: OfficeCreateInput
  connect: OfficeWhereUniqueInput
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

type Aviary {
  id: ID!
  name: String
  capacity: Int
  falcons: Falcon
  lastCleaned: DateTime
  breedingProject: BreedingProject
  owner: User
  createdAt: DateTime
  updatedAt: DateTime
}

input AviaryWhereUniqueInput {
  id: ID
}

input AviaryWhereInput {
  AND: [AviaryWhereInput!]
  OR: [AviaryWhereInput!]
  NOT: [AviaryWhereInput!]
  id: IDFilter
  name: StringFilter
  capacity: IntFilter
  falcons: FalconWhereInput
  lastCleaned: DateTimeNullableFilter
  breedingProject: BreedingProjectWhereInput
  owner: UserWhereInput
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input IntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntFilter
}

input AviaryOrderByInput {
  id: OrderDirection
  name: OrderDirection
  capacity: OrderDirection
  lastCleaned: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input AviaryUpdateInput {
  name: String
  capacity: Int
  falcons: FalconRelateToOneForUpdateInput
  lastCleaned: DateTime
  breedingProject: BreedingProjectRelateToOneForUpdateInput
  owner: UserRelateToOneForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input BreedingProjectRelateToOneForUpdateInput {
  create: BreedingProjectCreateInput
  connect: BreedingProjectWhereUniqueInput
  disconnect: Boolean
}

input AviaryUpdateArgs {
  where: AviaryWhereUniqueInput!
  data: AviaryUpdateInput!
}

input AviaryCreateInput {
  name: String
  capacity: Int
  falcons: FalconRelateToOneForCreateInput
  lastCleaned: DateTime
  breedingProject: BreedingProjectRelateToOneForCreateInput
  owner: UserRelateToOneForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input BreedingProjectRelateToOneForCreateInput {
  create: BreedingProjectCreateInput
  connect: BreedingProjectWhereUniqueInput
}

type Address {
  id: ID!
  street: String
  no: String
  zipCode: String
  city: String
  country: String
  breedingProject: BreedingProject
  owner: User
  createdAt: DateTime
  updatedAt: DateTime
}

input AddressWhereUniqueInput {
  id: ID
}

input AddressWhereInput {
  AND: [AddressWhereInput!]
  OR: [AddressWhereInput!]
  NOT: [AddressWhereInput!]
  id: IDFilter
  street: StringFilter
  no: StringFilter
  zipCode: StringFilter
  city: StringFilter
  country: StringFilter
  breedingProject: BreedingProjectWhereInput
  owner: UserWhereInput
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input AddressOrderByInput {
  id: OrderDirection
  street: OrderDirection
  no: OrderDirection
  zipCode: OrderDirection
  city: OrderDirection
  country: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input AddressUpdateInput {
  street: String
  no: String
  zipCode: String
  city: String
  country: String
  breedingProject: BreedingProjectRelateToOneForUpdateInput
  owner: UserRelateToOneForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input AddressUpdateArgs {
  where: AddressWhereUniqueInput!
  data: AddressUpdateInput!
}

input AddressCreateInput {
  street: String
  no: String
  zipCode: String
  city: String
  country: String
  breedingProject: BreedingProjectRelateToOneForCreateInput
  owner: UserRelateToOneForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

type Falcon {
  id: ID!
  name: String
  ring: String
  species: Species
  sex: FalconSexType
  birthDate: DateTime
  source: String
  widthYoung: Int
  lengthYoung: Int
  weightYoung: Int
  widthOld: Int
  lengthOld: Int
  weightOld: Int
  notes: String
  inPair: Pair
  parentPair: Pair
  aviary: Aviary
  owner: User
  createdAt: DateTime
  updatedAt: DateTime
}

enum FalconSexType {
  UNKNOWN
  MALE
  FEMALE
}

input FalconWhereUniqueInput {
  id: ID
}

input FalconWhereInput {
  AND: [FalconWhereInput!]
  OR: [FalconWhereInput!]
  NOT: [FalconWhereInput!]
  id: IDFilter
  name: StringFilter
  ring: StringFilter
  species: SpeciesWhereInput
  sex: FalconSexTypeNullableFilter
  birthDate: DateTimeNullableFilter
  source: StringFilter
  widthYoung: IntNullableFilter
  lengthYoung: IntNullableFilter
  weightYoung: IntNullableFilter
  widthOld: IntNullableFilter
  lengthOld: IntNullableFilter
  weightOld: IntNullableFilter
  notes: StringFilter
  inPair: PairWhereInput
  parentPair: PairWhereInput
  aviary: AviaryWhereInput
  owner: UserWhereInput
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input FalconSexTypeNullableFilter {
  equals: FalconSexType
  in: [FalconSexType!]
  notIn: [FalconSexType!]
  not: FalconSexTypeNullableFilter
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input FalconOrderByInput {
  id: OrderDirection
  name: OrderDirection
  ring: OrderDirection
  sex: OrderDirection
  birthDate: OrderDirection
  source: OrderDirection
  widthYoung: OrderDirection
  lengthYoung: OrderDirection
  weightYoung: OrderDirection
  widthOld: OrderDirection
  lengthOld: OrderDirection
  weightOld: OrderDirection
  notes: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input FalconUpdateInput {
  name: String
  ring: String
  species: SpeciesRelateToOneForUpdateInput
  sex: FalconSexType
  birthDate: DateTime
  source: String
  widthYoung: Int
  lengthYoung: Int
  weightYoung: Int
  widthOld: Int
  lengthOld: Int
  weightOld: Int
  notes: String
  inPair: PairRelateToOneForUpdateInput
  parentPair: PairRelateToOneForUpdateInput
  aviary: AviaryRelateToOneForUpdateInput
  owner: UserRelateToOneForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input SpeciesRelateToOneForUpdateInput {
  create: SpeciesCreateInput
  connect: SpeciesWhereUniqueInput
  disconnect: Boolean
}

input PairRelateToOneForUpdateInput {
  create: PairCreateInput
  connect: PairWhereUniqueInput
  disconnect: Boolean
}

input FalconUpdateArgs {
  where: FalconWhereUniqueInput!
  data: FalconUpdateInput!
}

input FalconCreateInput {
  name: String
  ring: String
  species: SpeciesRelateToOneForCreateInput
  sex: FalconSexType
  birthDate: DateTime
  source: String
  widthYoung: Int
  lengthYoung: Int
  weightYoung: Int
  widthOld: Int
  lengthOld: Int
  weightOld: Int
  notes: String
  inPair: PairRelateToOneForCreateInput
  parentPair: PairRelateToOneForCreateInput
  aviary: AviaryRelateToOneForCreateInput
  owner: UserRelateToOneForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input SpeciesRelateToOneForCreateInput {
  create: SpeciesCreateInput
  connect: SpeciesWhereUniqueInput
}

input PairRelateToOneForCreateInput {
  create: PairCreateInput
  connect: PairWhereUniqueInput
}

type Pair {
  id: ID!
  name: String
  notes: String
  male: Falcon
  female: Falcon
  children(where: FalconWhereInput! = {}, orderBy: [FalconOrderByInput!]! = [], take: Int, skip: Int! = 0): [Falcon!]
  childrenCount(where: FalconWhereInput! = {}): Int
  owner: User
  putTogether: DateTime
  split: DateTime
  createdAt: DateTime
  updatedAt: DateTime
}

input PairWhereUniqueInput {
  id: ID
}

input PairWhereInput {
  AND: [PairWhereInput!]
  OR: [PairWhereInput!]
  NOT: [PairWhereInput!]
  id: IDFilter
  name: StringFilter
  notes: StringFilter
  male: FalconWhereInput
  female: FalconWhereInput
  children: FalconManyRelationFilter
  owner: UserWhereInput
  putTogether: DateTimeNullableFilter
  split: DateTimeNullableFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input FalconManyRelationFilter {
  every: FalconWhereInput
  some: FalconWhereInput
  none: FalconWhereInput
}

input PairOrderByInput {
  id: OrderDirection
  name: OrderDirection
  notes: OrderDirection
  putTogether: OrderDirection
  split: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input PairUpdateInput {
  name: String
  notes: String
  male: FalconRelateToOneForUpdateInput
  female: FalconRelateToOneForUpdateInput
  children: FalconRelateToManyForUpdateInput
  owner: UserRelateToOneForUpdateInput
  putTogether: DateTime
  split: DateTime
  createdAt: DateTime
  updatedAt: DateTime
}

input FalconRelateToManyForUpdateInput {
  disconnect: [FalconWhereUniqueInput!]
  set: [FalconWhereUniqueInput!]
  create: [FalconCreateInput!]
  connect: [FalconWhereUniqueInput!]
}

input PairUpdateArgs {
  where: PairWhereUniqueInput!
  data: PairUpdateInput!
}

input PairCreateInput {
  name: String
  notes: String
  male: FalconRelateToOneForCreateInput
  female: FalconRelateToOneForCreateInput
  children: FalconRelateToManyForCreateInput
  owner: UserRelateToOneForCreateInput
  putTogether: DateTime
  split: DateTime
  createdAt: DateTime
  updatedAt: DateTime
}

input FalconRelateToManyForCreateInput {
  create: [FalconCreateInput!]
  connect: [FalconWhereUniqueInput!]
}

type Species {
  id: ID!
  name: String
  latin: String
}

input SpeciesWhereUniqueInput {
  id: ID
}

input SpeciesWhereInput {
  AND: [SpeciesWhereInput!]
  OR: [SpeciesWhereInput!]
  NOT: [SpeciesWhereInput!]
  id: IDFilter
  name: StringFilter
  latin: StringFilter
}

input SpeciesOrderByInput {
  id: OrderDirection
  name: OrderDirection
  latin: OrderDirection
}

input SpeciesUpdateInput {
  name: String
  latin: String
}

input SpeciesUpdateArgs {
  where: SpeciesWhereUniqueInput!
  data: SpeciesUpdateInput!
}

input SpeciesCreateInput {
  name: String
  latin: String
}

type Document {
  id: ID!
  falcon: Falcon
  documentType: DocumentType
  documentNumber: String
  scanFile: String
  rawFile: String
  owner: User
  createdAt: DateTime
  updatedAt: DateTime
}

input DocumentWhereUniqueInput {
  id: ID
}

input DocumentWhereInput {
  AND: [DocumentWhereInput!]
  OR: [DocumentWhereInput!]
  NOT: [DocumentWhereInput!]
  id: IDFilter
  falcon: FalconWhereInput
  documentType: DocumentTypeWhereInput
  documentNumber: StringFilter
  scanFile: StringFilter
  rawFile: StringFilter
  owner: UserWhereInput
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input DocumentOrderByInput {
  id: OrderDirection
  documentNumber: OrderDirection
  scanFile: OrderDirection
  rawFile: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input DocumentUpdateInput {
  falcon: FalconRelateToOneForUpdateInput
  documentType: DocumentTypeRelateToOneForUpdateInput
  documentNumber: String
  scanFile: String
  rawFile: String
  owner: UserRelateToOneForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input DocumentTypeRelateToOneForUpdateInput {
  create: DocumentTypeCreateInput
  connect: DocumentTypeWhereUniqueInput
  disconnect: Boolean
}

input DocumentUpdateArgs {
  where: DocumentWhereUniqueInput!
  data: DocumentUpdateInput!
}

input DocumentCreateInput {
  falcon: FalconRelateToOneForCreateInput
  documentType: DocumentTypeRelateToOneForCreateInput
  documentNumber: String
  scanFile: String
  rawFile: String
  owner: UserRelateToOneForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input DocumentTypeRelateToOneForCreateInput {
  create: DocumentTypeCreateInput
  connect: DocumentTypeWhereUniqueInput
}

type DocumentType {
  id: ID!
  name: String
}

input DocumentTypeWhereUniqueInput {
  id: ID
}

input DocumentTypeWhereInput {
  AND: [DocumentTypeWhereInput!]
  OR: [DocumentTypeWhereInput!]
  NOT: [DocumentTypeWhereInput!]
  id: IDFilter
  name: StringFilter
}

input DocumentTypeOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input DocumentTypeUpdateInput {
  name: String
}

input DocumentTypeUpdateArgs {
  where: DocumentTypeWhereUniqueInput!
  data: DocumentTypeUpdateInput!
}

input DocumentTypeCreateInput {
  name: String
}

type Office {
  id: ID!
  officeType: OfficeType
  name: String
  breedingProject: BreedingProject
  owner: User
  createdAt: DateTime
  updatedAt: DateTime
}

input OfficeWhereUniqueInput {
  id: ID
}

input OfficeWhereInput {
  AND: [OfficeWhereInput!]
  OR: [OfficeWhereInput!]
  NOT: [OfficeWhereInput!]
  id: IDFilter
  officeType: OfficeTypeWhereInput
  name: StringFilter
  breedingProject: BreedingProjectWhereInput
  owner: UserWhereInput
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input OfficeOrderByInput {
  id: OrderDirection
  name: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input OfficeUpdateInput {
  officeType: OfficeTypeRelateToOneForUpdateInput
  name: String
  breedingProject: BreedingProjectRelateToOneForUpdateInput
  owner: UserRelateToOneForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input OfficeTypeRelateToOneForUpdateInput {
  create: OfficeTypeCreateInput
  connect: OfficeTypeWhereUniqueInput
  disconnect: Boolean
}

input OfficeUpdateArgs {
  where: OfficeWhereUniqueInput!
  data: OfficeUpdateInput!
}

input OfficeCreateInput {
  officeType: OfficeTypeRelateToOneForCreateInput
  name: String
  breedingProject: BreedingProjectRelateToOneForCreateInput
  owner: UserRelateToOneForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input OfficeTypeRelateToOneForCreateInput {
  create: OfficeTypeCreateInput
  connect: OfficeTypeWhereUniqueInput
}

type OfficeType {
  id: ID!
  name: String
}

input OfficeTypeWhereUniqueInput {
  id: ID
}

input OfficeTypeWhereInput {
  AND: [OfficeTypeWhereInput!]
  OR: [OfficeTypeWhereInput!]
  NOT: [OfficeTypeWhereInput!]
  id: IDFilter
  name: StringFilter
}

input OfficeTypeOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input OfficeTypeUpdateInput {
  name: String
}

input OfficeTypeUpdateArgs {
  where: OfficeTypeWhereUniqueInput!
  data: OfficeTypeUpdateInput!
}

input OfficeTypeCreateInput {
  name: String
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createBreedingProject(data: BreedingProjectCreateInput!): BreedingProject
  createBreedingProjects(data: [BreedingProjectCreateInput!]!): [BreedingProject]
  updateBreedingProject(where: BreedingProjectWhereUniqueInput!, data: BreedingProjectUpdateInput!): BreedingProject
  updateBreedingProjects(data: [BreedingProjectUpdateArgs!]!): [BreedingProject]
  deleteBreedingProject(where: BreedingProjectWhereUniqueInput!): BreedingProject
  deleteBreedingProjects(where: [BreedingProjectWhereUniqueInput!]!): [BreedingProject]
  createAviary(data: AviaryCreateInput!): Aviary
  createAviaries(data: [AviaryCreateInput!]!): [Aviary]
  updateAviary(where: AviaryWhereUniqueInput!, data: AviaryUpdateInput!): Aviary
  updateAviaries(data: [AviaryUpdateArgs!]!): [Aviary]
  deleteAviary(where: AviaryWhereUniqueInput!): Aviary
  deleteAviaries(where: [AviaryWhereUniqueInput!]!): [Aviary]
  createAddress(data: AddressCreateInput!): Address
  createAddresses(data: [AddressCreateInput!]!): [Address]
  updateAddress(where: AddressWhereUniqueInput!, data: AddressUpdateInput!): Address
  updateAddresses(data: [AddressUpdateArgs!]!): [Address]
  deleteAddress(where: AddressWhereUniqueInput!): Address
  deleteAddresses(where: [AddressWhereUniqueInput!]!): [Address]
  createFalcon(data: FalconCreateInput!): Falcon
  createFalcons(data: [FalconCreateInput!]!): [Falcon]
  updateFalcon(where: FalconWhereUniqueInput!, data: FalconUpdateInput!): Falcon
  updateFalcons(data: [FalconUpdateArgs!]!): [Falcon]
  deleteFalcon(where: FalconWhereUniqueInput!): Falcon
  deleteFalcons(where: [FalconWhereUniqueInput!]!): [Falcon]
  createPair(data: PairCreateInput!): Pair
  createPairs(data: [PairCreateInput!]!): [Pair]
  updatePair(where: PairWhereUniqueInput!, data: PairUpdateInput!): Pair
  updatePairs(data: [PairUpdateArgs!]!): [Pair]
  deletePair(where: PairWhereUniqueInput!): Pair
  deletePairs(where: [PairWhereUniqueInput!]!): [Pair]
  createSpecies(data: SpeciesCreateInput!): Species
  createFalconSpecies(data: [SpeciesCreateInput!]!): [Species]
  updateSpecies(where: SpeciesWhereUniqueInput!, data: SpeciesUpdateInput!): Species
  updateFalconSpecies(data: [SpeciesUpdateArgs!]!): [Species]
  deleteSpecies(where: SpeciesWhereUniqueInput!): Species
  deleteFalconSpecies(where: [SpeciesWhereUniqueInput!]!): [Species]
  createDocument(data: DocumentCreateInput!): Document
  createDocuments(data: [DocumentCreateInput!]!): [Document]
  updateDocument(where: DocumentWhereUniqueInput!, data: DocumentUpdateInput!): Document
  updateDocuments(data: [DocumentUpdateArgs!]!): [Document]
  deleteDocument(where: DocumentWhereUniqueInput!): Document
  deleteDocuments(where: [DocumentWhereUniqueInput!]!): [Document]
  createDocumentType(data: DocumentTypeCreateInput!): DocumentType
  createDocumentTypes(data: [DocumentTypeCreateInput!]!): [DocumentType]
  updateDocumentType(where: DocumentTypeWhereUniqueInput!, data: DocumentTypeUpdateInput!): DocumentType
  updateDocumentTypes(data: [DocumentTypeUpdateArgs!]!): [DocumentType]
  deleteDocumentType(where: DocumentTypeWhereUniqueInput!): DocumentType
  deleteDocumentTypes(where: [DocumentTypeWhereUniqueInput!]!): [DocumentType]
  createOffice(data: OfficeCreateInput!): Office
  createOffices(data: [OfficeCreateInput!]!): [Office]
  updateOffice(where: OfficeWhereUniqueInput!, data: OfficeUpdateInput!): Office
  updateOffices(data: [OfficeUpdateArgs!]!): [Office]
  deleteOffice(where: OfficeWhereUniqueInput!): Office
  deleteOffices(where: [OfficeWhereUniqueInput!]!): [Office]
  createOfficeType(data: OfficeTypeCreateInput!): OfficeType
  createOfficeTypes(data: [OfficeTypeCreateInput!]!): [OfficeType]
  updateOfficeType(where: OfficeTypeWhereUniqueInput!, data: OfficeTypeUpdateInput!): OfficeType
  updateOfficeTypes(data: [OfficeTypeUpdateArgs!]!): [OfficeType]
  deleteOfficeType(where: OfficeTypeWhereUniqueInput!): OfficeType
  deleteOfficeTypes(where: [OfficeTypeWhereUniqueInput!]!): [OfficeType]
  endSession: Boolean!
  authenticateUserWithPassword(email: String!, password: String!): UserAuthenticationWithPasswordResult
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  firstName: String
  lastName: String
  email: String
  password: String
}

type Query {
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  breedingProjects(where: BreedingProjectWhereInput! = {}, orderBy: [BreedingProjectOrderByInput!]! = [], take: Int, skip: Int! = 0): [BreedingProject!]
  breedingProject(where: BreedingProjectWhereUniqueInput!): BreedingProject
  breedingProjectsCount(where: BreedingProjectWhereInput! = {}): Int
  aviaries(where: AviaryWhereInput! = {}, orderBy: [AviaryOrderByInput!]! = [], take: Int, skip: Int! = 0): [Aviary!]
  aviary(where: AviaryWhereUniqueInput!): Aviary
  aviariesCount(where: AviaryWhereInput! = {}): Int
  addresses(where: AddressWhereInput! = {}, orderBy: [AddressOrderByInput!]! = [], take: Int, skip: Int! = 0): [Address!]
  address(where: AddressWhereUniqueInput!): Address
  addressesCount(where: AddressWhereInput! = {}): Int
  falcons(where: FalconWhereInput! = {}, orderBy: [FalconOrderByInput!]! = [], take: Int, skip: Int! = 0): [Falcon!]
  falcon(where: FalconWhereUniqueInput!): Falcon
  falconsCount(where: FalconWhereInput! = {}): Int
  pairs(where: PairWhereInput! = {}, orderBy: [PairOrderByInput!]! = [], take: Int, skip: Int! = 0): [Pair!]
  pair(where: PairWhereUniqueInput!): Pair
  pairsCount(where: PairWhereInput! = {}): Int
  falconSpecies(where: SpeciesWhereInput! = {}, orderBy: [SpeciesOrderByInput!]! = [], take: Int, skip: Int! = 0): [Species!]
  species(where: SpeciesWhereUniqueInput!): Species
  falconSpeciesCount(where: SpeciesWhereInput! = {}): Int
  documents(where: DocumentWhereInput! = {}, orderBy: [DocumentOrderByInput!]! = [], take: Int, skip: Int! = 0): [Document!]
  document(where: DocumentWhereUniqueInput!): Document
  documentsCount(where: DocumentWhereInput! = {}): Int
  documentTypes(where: DocumentTypeWhereInput! = {}, orderBy: [DocumentTypeOrderByInput!]! = [], take: Int, skip: Int! = 0): [DocumentType!]
  documentType(where: DocumentTypeWhereUniqueInput!): DocumentType
  documentTypesCount(where: DocumentTypeWhereInput! = {}): Int
  offices(where: OfficeWhereInput! = {}, orderBy: [OfficeOrderByInput!]! = [], take: Int, skip: Int! = 0): [Office!]
  office(where: OfficeWhereUniqueInput!): Office
  officesCount(where: OfficeWhereInput! = {}): Int
  officeTypes(where: OfficeTypeWhereInput! = {}, orderBy: [OfficeTypeOrderByInput!]! = [], take: Int, skip: Int! = 0): [OfficeType!]
  officeType(where: OfficeTypeWhereUniqueInput!): OfficeType
  officeTypesCount(where: OfficeTypeWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
