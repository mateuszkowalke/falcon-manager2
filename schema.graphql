# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  firstName: String
  lastName: String
  email: String
  password: PasswordState
  isAdmin: Boolean
  breedingProjects(where: BreedingProjectWhereInput! = {}, orderBy: [BreedingProjectOrderByInput!]! = [], take: Int, skip: Int! = 0): [BreedingProject!]
  breedingProjectsCount(where: BreedingProjectWhereInput! = {}): Int
  addresses(where: AddressWhereInput! = {}, orderBy: [AddressOrderByInput!]! = [], take: Int, skip: Int! = 0): [Address!]
  addressesCount(where: AddressWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
}

type PasswordState {
  isSet: Boolean!
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  firstName: StringFilter
  lastName: StringFilter
  email: StringFilter
  isAdmin: BooleanFilter
  breedingProjects: BreedingProjectManyRelationFilter
  addresses: AddressManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input BreedingProjectManyRelationFilter {
  every: BreedingProjectWhereInput
  some: BreedingProjectWhereInput
  none: BreedingProjectWhereInput
}

input AddressManyRelationFilter {
  every: AddressWhereInput
  some: AddressWhereInput
  none: AddressWhereInput
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input UserOrderByInput {
  id: OrderDirection
  firstName: OrderDirection
  lastName: OrderDirection
  email: OrderDirection
  isAdmin: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  firstName: String
  lastName: String
  email: String
  password: String
  isAdmin: Boolean
  breedingProjects: BreedingProjectRelateToManyForUpdateInput
  addresses: AddressRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input BreedingProjectRelateToManyForUpdateInput {
  disconnect: [BreedingProjectWhereUniqueInput!]
  set: [BreedingProjectWhereUniqueInput!]
  create: [BreedingProjectCreateInput!]
  connect: [BreedingProjectWhereUniqueInput!]
}

input AddressRelateToManyForUpdateInput {
  disconnect: [AddressWhereUniqueInput!]
  set: [AddressWhereUniqueInput!]
  create: [AddressCreateInput!]
  connect: [AddressWhereUniqueInput!]
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  firstName: String
  lastName: String
  email: String
  password: String
  isAdmin: Boolean
  breedingProjects: BreedingProjectRelateToManyForCreateInput
  addresses: AddressRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input BreedingProjectRelateToManyForCreateInput {
  create: [BreedingProjectCreateInput!]
  connect: [BreedingProjectWhereUniqueInput!]
}

input AddressRelateToManyForCreateInput {
  create: [AddressCreateInput!]
  connect: [AddressWhereUniqueInput!]
}

type BreedingProject {
  id: ID!
  name: String
  vetRegNo: String
  address: Address
  owner: User
  createdAt: DateTime
  updatedAt: DateTime
}

input BreedingProjectWhereUniqueInput {
  id: ID
}

input BreedingProjectWhereInput {
  AND: [BreedingProjectWhereInput!]
  OR: [BreedingProjectWhereInput!]
  NOT: [BreedingProjectWhereInput!]
  id: IDFilter
  name: StringFilter
  vetRegNo: StringFilter
  address: AddressWhereInput
  owner: UserWhereInput
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input BreedingProjectOrderByInput {
  id: OrderDirection
  name: OrderDirection
  vetRegNo: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input BreedingProjectUpdateInput {
  name: String
  vetRegNo: String
  address: AddressRelateToOneForUpdateInput
  owner: UserRelateToOneForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input AddressRelateToOneForUpdateInput {
  create: AddressCreateInput
  connect: AddressWhereUniqueInput
  disconnect: Boolean
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input BreedingProjectUpdateArgs {
  where: BreedingProjectWhereUniqueInput!
  data: BreedingProjectUpdateInput!
}

input BreedingProjectCreateInput {
  name: String
  vetRegNo: String
  address: AddressRelateToOneForCreateInput
  owner: UserRelateToOneForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input AddressRelateToOneForCreateInput {
  create: AddressCreateInput
  connect: AddressWhereUniqueInput
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

type Address {
  id: ID!
  street: String
  no: String
  zipCode: String
  city: String
  country: String
  breedingProject: BreedingProject
  owner: User
  createdAt: DateTime
  updatedAt: DateTime
}

input AddressWhereUniqueInput {
  id: ID
}

input AddressWhereInput {
  AND: [AddressWhereInput!]
  OR: [AddressWhereInput!]
  NOT: [AddressWhereInput!]
  id: IDFilter
  street: StringFilter
  no: StringFilter
  zipCode: StringFilter
  city: StringFilter
  country: StringFilter
  breedingProject: BreedingProjectWhereInput
  owner: UserWhereInput
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input AddressOrderByInput {
  id: OrderDirection
  street: OrderDirection
  no: OrderDirection
  zipCode: OrderDirection
  city: OrderDirection
  country: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input AddressUpdateInput {
  street: String
  no: String
  zipCode: String
  city: String
  country: String
  breedingProject: BreedingProjectRelateToOneForUpdateInput
  owner: UserRelateToOneForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input BreedingProjectRelateToOneForUpdateInput {
  create: BreedingProjectCreateInput
  connect: BreedingProjectWhereUniqueInput
  disconnect: Boolean
}

input AddressUpdateArgs {
  where: AddressWhereUniqueInput!
  data: AddressUpdateInput!
}

input AddressCreateInput {
  street: String
  no: String
  zipCode: String
  city: String
  country: String
  breedingProject: BreedingProjectRelateToOneForCreateInput
  owner: UserRelateToOneForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input BreedingProjectRelateToOneForCreateInput {
  create: BreedingProjectCreateInput
  connect: BreedingProjectWhereUniqueInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createBreedingProject(data: BreedingProjectCreateInput!): BreedingProject
  createBreedingProjects(data: [BreedingProjectCreateInput!]!): [BreedingProject]
  updateBreedingProject(where: BreedingProjectWhereUniqueInput!, data: BreedingProjectUpdateInput!): BreedingProject
  updateBreedingProjects(data: [BreedingProjectUpdateArgs!]!): [BreedingProject]
  deleteBreedingProject(where: BreedingProjectWhereUniqueInput!): BreedingProject
  deleteBreedingProjects(where: [BreedingProjectWhereUniqueInput!]!): [BreedingProject]
  createAddress(data: AddressCreateInput!): Address
  createAddresses(data: [AddressCreateInput!]!): [Address]
  updateAddress(where: AddressWhereUniqueInput!, data: AddressUpdateInput!): Address
  updateAddresses(data: [AddressUpdateArgs!]!): [Address]
  deleteAddress(where: AddressWhereUniqueInput!): Address
  deleteAddresses(where: [AddressWhereUniqueInput!]!): [Address]
  endSession: Boolean!
  authenticateUserWithPassword(email: String!, password: String!): UserAuthenticationWithPasswordResult
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  firstName: String
  lastName: String
  email: String
  password: String
}

type Query {
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  breedingProjects(where: BreedingProjectWhereInput! = {}, orderBy: [BreedingProjectOrderByInput!]! = [], take: Int, skip: Int! = 0): [BreedingProject!]
  breedingProject(where: BreedingProjectWhereUniqueInput!): BreedingProject
  breedingProjectsCount(where: BreedingProjectWhereInput! = {}): Int
  addresses(where: AddressWhereInput! = {}, orderBy: [AddressOrderByInput!]! = [], take: Int, skip: Int! = 0): [Address!]
  address(where: AddressWhereUniqueInput!): Address
  addressesCount(where: AddressWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
